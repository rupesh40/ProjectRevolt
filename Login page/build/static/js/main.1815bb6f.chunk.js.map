{"version":3,"sources":["components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","className","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDelete","id","classes","value","count","Component","counters","onReset","map","temp","key","App","state","handleIncrement","index","indexOf","setState","handleDelete","counterId","filter","c","handleReset","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAEqBA,G,6KAER,IAAD,OACJ,OACI,6BACJ,0BAAMC,UAAWC,KAAKC,mBAAoBD,KAAKE,eAC3C,4BAAQC,QAAS,kBAAK,EAAKC,MAAMC,YAAY,EAAKD,MAAME,UACvDP,UAAU,4BADX,aAIA,4BAAQI,QAAS,kBAAI,EAAKC,MAAMG,SAAS,EAAKH,MAAME,QAAQE,KAC3DT,UAAU,6BADX,a,wCASJ,IAAIU,EAAU,mBAEd,OADAA,GAAyC,IAA7BT,KAAKI,MAAME,QAAQI,MAAe,UAAY,Y,oCAI/C,IACGC,EAAOX,KAAKI,MAAME,QAAzBI,MACP,OAAgB,IAATC,EAAa,OAAQA,M,GA1BCC,cCChBC,E,uKAER,IAAD,EACiCb,KAAKI,MAA3CU,EADK,EACLA,QAAQP,EADH,EACGA,SAASF,EADZ,EACYA,YAAYC,EADxB,EACwBA,QAC5B,OACI,6BACA,4BAAQH,QAASW,EAChBf,UAAU,8BADX,SAICO,EAAQS,KAAI,SAAAC,GAAI,OAAE,kBAAC,EAAD,CACfT,SAAUA,EACVF,YAAaA,EACbY,IAAKD,EAAKR,GACVF,QAASU,Y,GAdaJ,aC+CvBM,E,4MA7CbC,MAAM,CACJb,QAAQ,CACJ,CAACE,GAAG,EAAEE,MAAM,GACZ,CAACF,GAAG,EAAEE,MAAM,GACZ,CAACF,GAAG,EAAEE,MAAM,GACZ,CAACF,GAAG,EAAEE,MAAM,K,EAKpBU,gBAAgB,SAACP,GACb,IAAMP,EAAQ,YAAI,EAAKa,MAAMb,SACvBe,EAAMf,EAAQgB,QAAQT,GAC5BP,EAAQe,GAAR,eAAmBR,GACnBP,EAAQe,GAAOX,QACf,EAAKa,SAAS,CAACjB,a,EAGnBkB,aAAa,SAACC,GACd,IAAMnB,EAAQ,EAAKa,MAAMb,QAAQoB,QAAO,SAAAC,GAAC,OAAGA,EAAEnB,KAAMiB,KAChD,EAAKF,SAAS,CAACjB,a,EAEnBsB,YAAY,WACR,IAAMtB,EAAQ,EAAKa,MAAMb,QAAQS,KAAI,SAAAY,GAEjC,OADAA,EAAEjB,MAAM,EACDiB,KAEX,EAAKJ,SAAS,CAACjB,a,uDAIjB,OACE,kBAAC,IAAMuB,SAAP,KAEE,0BAAM9B,UAAU,aACd,kBAAC,EAAD,CAAUQ,SAAUP,KAAKwB,aACzBnB,YAAaL,KAAKoB,gBAClBN,QAASd,KAAK4B,YACdtB,QAASN,KAAKmB,MAAMb,gB,GAxCVM,aCSEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACN,kBAAC,EAAD,MAEDC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1815bb6f.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nexport default class Counter extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n            <button onClick={()=> this.props.onIncrement(this.props.counter)}\r\n             className=\"btn btn-secondary btn-sm\">\r\n                Increment\r\n            </button>\r\n            <button onClick={()=>this.props.onDelete(this.props.counter.id)}\r\n             className=\"btn btn-danger btn-sm m-2\"> \r\n                Delete\r\n            </button>          \r\n            </div>\r\n            );\r\n    }\r\n\r\n    getBadgeClasses() {\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += (this.props.counter.value === 0) ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount() {\r\n        const {value: count}=this.props.counter\r\n        return count ===0 ? 'Zero': count ;\r\n    }\r\n    \r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport Counter from './counter.jsx';\r\n\r\nexport default class counters extends Component{\r\n    \r\n    render(){\r\nconst {onReset,onDelete,onIncrement,counter}=this.props\r\n        return( \r\n            <div>\r\n            <button onClick={onReset}\r\n             className=\"btn btn-primary btn-sm m-2\">\r\n             Reset\r\n            </button>\r\n            {counter.map(temp=><Counter\r\n                onDelete={onDelete}\r\n                onIncrement={onIncrement} \r\n                key={temp.id}\r\n                counter={temp} >\r\n                </Counter>)}\r\n            \r\n            \r\n            </div> )\r\n    \r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Counters from './components/counters'\nclass App extends Component{\n\n  state={\n    counter:[\n        {id:1,value:0},\n        {id:2,value:0},\n        {id:3,value:0},\n        {id:4,value:0}\n\n    ]\n    \n}\nhandleIncrement=(counters)=>{\n    const counter=[...this.state.counter]\n    const index=counter.indexOf(counters)\n    counter[index]={...counters}\n    counter[index].value++\n    this.setState({counter})\n}\n\nhandleDelete=(counterId)=>{\nconst counter=this.state.counter.filter(c=> c.id!== counterId);\n    this.setState({counter});\n}\nhandleReset=()=>{\n    const counter=this.state.counter.map(c=>{\n        c.value=0\n        return c\n    });\n    this.setState({counter});    \n}\n\n  render(){\n  return (\n    <React.Fragment>\n   \n      <main className=\"container\">\n        <Counters onDelete={this.handleDelete}\n        onIncrement={this.handleIncrement} \n        onReset={this.handleReset}\n        counter={this.state.counter} />\n      </main>\n    </React.Fragment>\n  );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n   <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}